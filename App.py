import streamlit as st
from docx import Document
from docx.shared import RGBColor
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from io import BytesIO


def aplicar_highlight(paragraph):
    """Aplica fundo amarelo (marca-texto) no par√°grafo inteiro."""
    for run in paragraph.runs:
        rPr = run._element.get_or_add_rPr()
        highlight = OxmlElement('w:highlight')
        highlight.set(qn('w:val'), 'yellow')
        rPr.append(highlight)


def gerar_legendas(publicacao):
    texto = publicacao.lower()
    legendas = []

    if "ac√≥rd√£o" in texto:
        legendas.append("ANALISAR AC√ìRD√ÉO")
        legendas.append("EMAIL AC√ìRD√ÉO")
        legendas.append("LEMBRETE RECURSAL")
    elif "senten√ßa homologat√≥ria" in texto or "homologo" in texto:
        legendas.append("ANALISAR SENTEN√áA HOMOLOGAT√ìRIA")
        legendas.append("EMAIL SENTEN√áA HOMOLOGAT√ìRIA")
        legendas.append("PAGAMENTO CLIENTE")
    elif "senten√ßa" in texto:
        legendas.append("ANALISAR SENTEN√áA")
        legendas.append("EMAIL SENTEN√áA")
    elif "despacho" in texto and "deneg" in texto:
        legendas.append("AGRAVOIRREV")
    elif "despacho" in texto:
        legendas.append("ANALISAR DESPACHO")
    elif "per√≠cia" in texto or "laudo" in texto:
        legendas.append("MANIFESTA√á√ÉO DE LAUDO")
        legendas.append("EMAIL LAUDO")
    elif "redesigna√ß√£o de per√≠cia" in texto:
        legendas.append("AGENDAR PER√çCIA")
        legendas.append("EMAIL PER√çCIA")
    elif "pauta" in texto or "audi√™ncia" in texto:
        legendas.append("AGENDAR AUDI√äNCIA")
    elif "alvar√°" in texto or "libera√ß√£o de valores" in texto or "cr√©dito" in texto or "expedi√ß√£o" in texto:
        legendas.append("PAGAMENTO CLIENTE")
        legendas.append("EMAIL ROSY PAGAMENTO")
    elif "agravo" in texto:
        if "peti√ß√£o" in texto:
            legendas.append("AGRAVO DE PETI√á√ÉO")
        else:
            legendas.append("AGRAVO DE INSTRUMENTO")
    elif "recurso de revista" in texto or "rr" in texto:
        legendas.append("RR")
    elif "embargos de declara√ß√£o" in texto or "ed" in texto:
        legendas.append("ED")
    elif "execu√ß√£o" in texto or "cumprimento de senten√ßa" in texto:
        legendas.append("EMBARGOS √Ä EXECU√á√ÉO")
    elif "distribui√ß√£o" in texto:
        legendas.append("RELAT√ìRIO DISTRIBUI√á√ÉO")
        legendas.append("ABRIR FICHA NO PROMAD")
    else:
        legendas.append("AN√ÅLISE")

    return legendas


def extrair_texto(doc):
    texto = ""

    # Ler texto fora de tabelas
    for paragrafo in doc.paragraphs:
        texto += paragrafo.text + "\n"

    # Ler texto dentro de tabelas
    for tabela in doc.tables:
        for linha in tabela.rows:
            for celula in linha.cells:
                for paragrafo in celula.paragraphs:
                    texto += paragrafo.text + "\n"

    return texto


def separar_publicacoes(texto):
    return texto.split("COMENT√ÅRIOS")


def processar_documento(doc):
    texto_completo = extrair_texto(doc)
    publicacoes = separar_publicacoes(texto_completo)

    novo_doc = Document()

    for publicacao in publicacoes:
        if publicacao.strip() == "":
            continue

        # Adiciona o texto da publica√ß√£o
        novo_doc.add_paragraph(publicacao.strip())

        # Gera legendas
        legendas = gerar_legendas(publicacao)

        for legenda in legendas:
            par = novo_doc.add_paragraph(legenda.upper())  # Legenda em CAIXA ALTA
            par.runs[0].bold = True
            aplicar_highlight(par)

        # Linha separadora
        novo_doc.add_paragraph("\n--------------------------------------------------\n")

    return novo_doc


# üî• INTERFACE STREAMLIT
st.title("üöÄ Rob√¥ Shinji")

st.markdown("""
Envie seu documento (.docx) com as publica√ß√µes. 
""")

arquivo = st.file_uploader("üì§ Envie seu documento (.docx)", type="docx")

if arquivo is not None:
    doc = Document(arquivo)
    documento_processado = processar_documento(doc)

    buffer = BytesIO()
    documento_processado.save(buffer)
    buffer.seek(0)

    st.success("‚úÖ Documento processado com sucesso!")
    st.download_button(
        label="üì• Baixar Documento com Legendas",
        data=buffer,
        file_name="documento_processado.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
